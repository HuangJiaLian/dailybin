#!/usr/bin/env python
import matplotlib.pyplot as plt 
import numpy as np
import argparse
import textwrap
import os, sys

parser = argparse.ArgumentParser(
        prog='dplot',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
        Example:
        dplot -F AllDat.csv -X 0 -Y 1 2 --dlabels "Tem" "Mean Tem" --xlabel Steps --ylabel "Temperature (K)" -T "Temperature Changes Over Step"
        '''))
    
parser.add_argument('-F', '--files2plot', nargs='+', help='The text files to plot.')

parser.add_argument('-X', '--xcol', nargs='?', const=0, type=int, default=0, \
                    help='The number of column as x axis')
parser.add_argument('-Y', '--ycols', nargs='+', type=int, \
                     help='The list number of column as y', default=[1])

parser.add_argument('--dlabels', nargs='+',\
                     help='The list of data label')
parser.add_argument('--xlabel', help='The name of x label', default='x')
parser.add_argument('--ylabel', help='The name of y label', default='y')
parser.add_argument('-T', '--title', help='The title of this plot', default='')

parser.add_argument('-S', '--start', nargs='?', const=0, type=int, default=0, \
                    help='Start to draw from row S')
parser.add_argument('-E', '--end', nargs='?', const=-1, type=int, default=-1, \
                    help='End at row E')
parser.add_argument('-O', '--output', help='The output file name', default='')
parser.add_argument('--show', dest='show', action='store_true')
parser.set_defaults(show=False)

parser.add_argument('--logx', dest='logx', action='store_true')
parser.add_argument('--logy', dest='logy', action='store_true')
parser.set_defaults(logx=False)
parser.set_defaults(logy=False)

parser.add_argument('--eps', dest='eps', action='store_true')
parser.add_argument('--no-eps', dest='eps', action='store_false')
parser.set_defaults(eps=False)

args = parser.parse_args()



# Read Text Files and leave what needs to plot
numFiles = len(args.files2plot)
dats = []
for F in args.files2plot:
    dat = np.loadtxt(F)

    if args.end > 0:
        dat = dat[args.start:args.end + 1]
    elif args.end < 0:
        numRows = dat.shape[0]
        dat = dat[args.start:numRows+args.end+2]
    
    dats.append(dat)

fig1 = plt.figure()
ax = fig1.add_subplot(1,1,1)


# Plot text Files
# print('Debug {}'.format(dats))
for dat, num in zip(dats, range(numFiles)):
    # print('Debug {}'.format(dat))
    # for col, dlabel in zip(args.ycols, args.dlabels):
    for col, i in zip(args.ycols, range(len(args.ycols))):
        dlabel = args.dlabels[i]
        label = dlabel if numFiles == 1 else dlabel + ' ' + str(num)
        ax.plot(dat[:, args.xcol], dat[:, col], label=label)

if args.logx == True:
    ax.set_xscale('log')

if args.logy == True:
    ax.set_yscale('log')

# plt.xlim(0,1)
# plt.ylim(0,1)
plt.title(args.title)
plt.xlabel(args.xlabel)
plt.ylabel(args.ylabel)

plt.grid()
plt.legend()

if len(args.output) == 0:
    title = 'fig_dplot' if len(args.title) == 0 else args.title
    if args.eps:
        plt.savefig(title.replace(" ", "_") + '.eps')  
    else:
        plt.savefig(title.replace(" ", "_") + '.png')  
else:
    title = args.output
    plt.savefig(title)

if args.show:
    plt.show()

plt.close()
